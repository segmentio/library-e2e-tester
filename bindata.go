// Code generated by go-bindata.
// sources:
// fixtures/alias/advance-alias.json
// fixtures/alias/alias.json
// fixtures/group/advance-group.json
// fixtures/group/group.json
// fixtures/identify/advance-identify.json
// fixtures/identify/identify.json
// fixtures/page/page.json
// fixtures/screen/advance-screen.json
// fixtures/screen/screen.json
// fixtures/track/advance-track.json
// fixtures/track/track.json
// DO NOT EDIT!

package tester

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fixturesAliasAdvanceAliasJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\x31\x4e\xc6\x30\x0c\x85\xf7\x9c\xc2\xf2\xcc\xc4\x46\x37\x60\x00\x76\x38\x40\x94\x5a\xa9\xa5\xd6\xa9\x12\x07\x11\x55\xb9\x3b\x8a\xfb\xab\x1d\xed\xef\xcb\x7b\xf1\xe1\x00\x50\xdb\x4e\x38\x01\xfa\x95\x7d\xc1\xa7\xb1\xaa\x85\xf2\xd7\x3c\x96\xa1\xe6\x4c\xa2\x3f\x85\xf2\x89\xf6\x4c\xbf\x9c\x6a\x39\xf1\x98\x6e\xe6\x25\x49\xdb\x2e\x38\xc6\xe7\x97\x13\xb1\x28\xc5\xec\x95\x93\x14\x9c\x60\x14\x03\xe0\x47\x4a\x71\x25\x78\x15\xbf\x36\xe5\x60\xa4\x3b\x80\x6e\x6f\x42\x12\xa5\x3f\xbd\x75\xb6\xd8\xe3\xe0\xb9\x77\x8b\x35\x69\xdb\xbd\xb4\x4b\x02\x40\xf1\x9b\x1d\xf4\xc6\xf1\x3d\x3d\x3c\xfb\xc2\x5c\x8b\xe6\xa1\xe2\x27\xc7\x05\xbe\x29\x2c\x68\xd4\x3a\x5d\x77\xff\x01\x00\x00\xff\xff\xa9\x1a\x38\x65\x10\x01\x00\x00")

func fixturesAliasAdvanceAliasJsonBytes() ([]byte, error) {
	return bindataRead(
		_fixturesAliasAdvanceAliasJson,
		"fixtures/alias/advance-alias.json",
	)
}

func fixturesAliasAdvanceAliasJson() (*asset, error) {
	bytes, err := fixturesAliasAdvanceAliasJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fixtures/alias/advance-alias.json", size: 272, mode: os.FileMode(420), modTime: time.Unix(1552454737, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fixturesAliasAliasJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x2a\xa9\x2c\x48\x55\xb2\x52\x50\x4a\xcc\xc9\x4c\x2c\x56\xd2\x01\x09\x95\x16\xa7\x16\x79\xa6\x80\x04\x93\x4b\x8b\x8a\x52\xf3\x4a\x42\x8b\x53\x8b\x20\x52\x05\x45\xa9\x65\x99\xf9\xa5\xc5\x10\x69\x10\x0f\x21\x97\x9c\x9f\x57\x92\x5a\x51\xa2\x64\xa5\x00\x32\x58\x41\x41\x29\x13\xac\xa8\xba\x3a\x33\xa5\xb6\x56\x89\x4b\x41\xa1\x96\xab\x96\x0b\x10\x00\x00\xff\xff\xf7\x3f\x36\x89\x74\x00\x00\x00")

func fixturesAliasAliasJsonBytes() ([]byte, error) {
	return bindataRead(
		_fixturesAliasAliasJson,
		"fixtures/alias/alias.json",
	)
}

func fixturesAliasAliasJson() (*asset, error) {
	bytes, err := fixturesAliasAliasJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fixtures/alias/alias.json", size: 116, mode: os.FileMode(420), modTime: time.Unix(1552454737, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fixturesGroupAdvanceGroupJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x41\x4e\xc3\x30\x10\x45\xf7\x39\xc5\xc8\x6b\x88\x0a\xcd\x02\xba\x63\x47\x37\x80\x94\x5e\x60\xea\x8e\xd2\x91\x9c\xb1\x65\x4f\x2a\xa2\x2a\x77\x47\x76\x1a\x08\xdd\xbe\xff\xfd\xfd\xec\x6b\x05\x60\x74\x0c\x64\x76\x60\xba\xe8\x87\x60\x1e\x32\x1a\x12\xc5\xfd\x29\x43\x39\xf3\x8c\x4a\x3a\x33\xc7\xc7\x88\x91\x29\xcd\x89\x46\x64\x4d\x66\x07\x79\x0d\xc0\x08\xf6\x65\x6f\x2f\xac\x64\xcf\xa5\x04\x60\x58\x4e\x43\xd2\x38\xe6\xe8\x40\xf6\x2c\xde\xf9\x6e\x5c\x52\xea\x83\xf3\x23\x51\xde\xd9\x3e\xbf\xde\x68\x70\x28\xb9\x4f\xa2\x14\x43\xe4\x44\x4b\x5f\xbd\xa2\x83\x23\x3b\x47\xd9\xe9\x65\xbb\x59\xae\x29\x8a\xd7\x2b\x9f\xa6\xc9\x54\x00\x53\x71\xb4\x5e\x94\xbe\xf5\x4f\x12\x43\xb8\x67\x00\xe6\x38\xb0\x2b\xe7\x9b\x66\x73\xbb\x69\xf5\xa0\x96\xba\x9e\x44\xa1\xc5\x3e\x38\xfa\x9f\xa7\x80\xb6\x94\xac\xef\xeb\x34\x17\x6b\x14\x74\xa3\xb2\x4d\x75\xba\x3b\x72\xa1\x98\xd8\x97\xb7\x35\x75\x53\x6f\x1e\xdb\x8f\xb7\xaf\xf6\xfd\xf3\x60\x4a\x63\xfa\x15\x67\x51\xea\x22\x2a\x7b\x59\x7d\xf1\x8a\x3e\xad\xfd\x17\xd3\x0b\xba\x81\x56\x53\xd5\x54\xfd\x04\x00\x00\xff\xff\x48\x5f\x25\x6b\xeb\x01\x00\x00")

func fixturesGroupAdvanceGroupJsonBytes() ([]byte, error) {
	return bindataRead(
		_fixturesGroupAdvanceGroupJson,
		"fixtures/group/advance-group.json",
	)
}

func fixturesGroupAdvanceGroupJson() (*asset, error) {
	bytes, err := fixturesGroupAdvanceGroupJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fixtures/group/advance-group.json", size: 491, mode: os.FileMode(420), modTime: time.Unix(1552511756, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fixturesGroupGroupJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8e\x31\x8e\x83\x30\x10\x45\x7b\x9f\x62\x34\xf5\x16\xab\xa5\xd9\x70\x03\xfa\x5c\xc0\x81\x2f\xb0\x62\x6c\xcb\x1e\x0a\x0b\xf9\xee\xd1\x98\xd0\xbe\x79\x7a\xf3\x4f\x43\xc4\x52\x13\x78\x24\x5e\x73\x3c\x12\xff\x28\x3a\x0a\xf2\xb4\x28\x4c\xd9\x0a\xf0\xbe\x70\x37\x2e\x5e\xb0\xee\x08\x72\x71\xc9\xd6\x49\xe1\x91\xb4\x47\xc4\xc1\xee\xbd\x38\x05\x27\x98\xb7\x2e\x11\xb1\x0b\xcb\x51\x24\x57\x3d\x3d\x31\x6f\x21\xfa\xb8\xd6\xfb\x8a\x3d\xf9\x58\x01\xed\x0c\x7f\x8f\x2f\x4d\xde\x06\xf5\x11\x04\x39\x65\x57\x70\xfb\x12\xc5\x7a\x7a\x39\xef\xa1\x8b\xfe\x87\xdf\xfb\x4d\x1f\x78\x9e\x6e\x69\x8d\x0d\x51\x33\xcd\x7c\x02\x00\x00\xff\xff\x2f\x3b\x70\x18\xe9\x00\x00\x00")

func fixturesGroupGroupJsonBytes() ([]byte, error) {
	return bindataRead(
		_fixturesGroupGroupJson,
		"fixtures/group/group.json",
	)
}

func fixturesGroupGroupJson() (*asset, error) {
	bytes, err := fixturesGroupGroupJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fixtures/group/group.json", size: 233, mode: os.FileMode(420), modTime: time.Unix(1551736418, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fixturesIdentifyAdvanceIdentifyJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x5d\x6b\xf2\x40\x10\x85\xef\xf3\x2b\x96\xbd\x7e\x79\x89\x2e\xc1\x8f\xab\x42\xad\xc1\x52\x63\x05\x7b\xd1\xde\xad\x71\xaa\x63\xf6\x23\x24\x93\x62\x08\xfb\xdf\xcb\x6e\x4c\x10\x7a\x7b\xe6\xcc\x79\xce\x4c\x17\x31\xc6\xa9\x2d\x81\x2f\x19\xc7\x13\x18\xc2\xef\x96\xff\xf3\x6a\x53\x43\xb5\x39\x79\x3d\x3b\x6c\xc4\x6e\xb5\x17\x5f\xfa\x83\x76\xab\xf3\x2d\x7b\x8e\xe3\xed\xf5\x82\x6f\x87\x22\xfe\xbc\xe6\xb4\x9d\xbe\xaa\x2c\xdd\x27\xbb\x74\xad\xb2\xf4\x45\xf4\xfb\x54\x49\xa4\x9a\x2f\x99\x67\x30\xc6\x8d\xd4\x81\xf2\x0e\x04\x15\x4b\xf1\x78\xb4\xa6\x0e\x56\xc6\x38\x68\x89\xca\x4f\x4b\x3f\x7d\x42\x83\x04\xf9\xe5\x7f\x6e\xf5\xe0\x28\x95\x34\xc1\x50\x81\xc6\x66\x94\x31\x34\xec\x3a\x3c\x39\xc7\x23\xc6\x5c\x60\xa3\x21\x38\x57\x92\xd0\x23\xc6\x06\x6b\x99\xc3\xd1\xda\xc2\x2b\xee\xbe\x9f\x5a\x7b\x56\x30\x7a\xee\x3d\x27\x3e\xf4\x47\xaa\x06\x26\x3c\xe8\x6e\x8c\x96\xc6\x9a\x56\xdb\xa6\xee\x7f\xb3\x88\xc5\x7c\x96\x88\x69\x32\x5f\xcc\xc4\x74\x91\xcc\x67\xfd\xf5\xb9\x35\x04\x37\xfa\x7b\x7e\x48\x1d\xda\x6b\x59\x3e\xa2\x0b\x68\x07\xf2\x23\x37\x72\xd1\x6f\x00\x00\x00\xff\xff\x95\x96\xdb\x41\xa8\x01\x00\x00")

func fixturesIdentifyAdvanceIdentifyJsonBytes() ([]byte, error) {
	return bindataRead(
		_fixturesIdentifyAdvanceIdentifyJson,
		"fixtures/identify/advance-identify.json",
	)
}

func fixturesIdentifyAdvanceIdentifyJson() (*asset, error) {
	bytes, err := fixturesIdentifyAdvanceIdentifyJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fixtures/identify/advance-identify.json", size: 424, mode: os.FileMode(420), modTime: time.Unix(1552454737, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fixturesIdentifyIdentifyJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcd\x31\x0e\xc2\x30\x0c\x05\xd0\x3d\xa7\xf8\xf2\x8c\x38\x40\x27\x36\xc4\xc6\x15\xd2\xc6\x08\x8b\xc6\x8d\x12\x77\xa8\xa2\xdc\x1d\x25\x15\xac\xcf\xff\xfb\x57\x07\x90\x1d\x89\x69\x02\x49\x60\x35\x79\x1d\x74\xe9\xba\x17\xce\x8f\xd0\x3d\x65\x6f\xcc\x9f\x93\x2d\x7b\xb1\x42\x13\x7a\x15\x20\xf5\x71\x94\x9f\x6c\x9c\x71\x97\x79\xde\xb4\x8c\x28\x40\x1c\xbd\xac\xe3\x45\xbf\xde\x44\xc5\x78\x79\x5f\x97\x2d\xfe\x12\x69\xf5\x7a\x6e\x70\x94\xfd\xcf\x32\x86\x6b\x95\xd0\x1a\x39\xa0\xb9\xe6\xbe\x01\x00\x00\xff\xff\x9a\xe7\x17\x53\xac\x00\x00\x00")

func fixturesIdentifyIdentifyJsonBytes() ([]byte, error) {
	return bindataRead(
		_fixturesIdentifyIdentifyJson,
		"fixtures/identify/identify.json",
	)
}

func fixturesIdentifyIdentifyJson() (*asset, error) {
	bytes, err := fixturesIdentifyIdentifyJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fixtures/identify/identify.json", size: 172, mode: os.FileMode(420), modTime: time.Unix(1551736418, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fixturesPagePageJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8d\x31\x0e\xc3\x20\x0c\x45\x77\x4e\x61\x79\xae\x92\x9d\x13\x34\x27\xe8\x8c\x88\xd5\x58\x85\x80\x88\x2b\x54\x51\xee\x5e\xe1\x34\xeb\xf3\xfb\xcf\xcd\x00\xa0\x7c\x32\xa1\x05\xcc\xee\x49\x78\x1b\x64\x77\x51\xc9\x3d\xc5\x3f\x79\x1f\x54\x96\x55\xad\xe2\x84\xe8\x75\xe2\x5c\x52\xa6\x22\x4c\x07\x5a\x18\xb1\x91\x63\x09\xba\x7e\x50\xf0\x29\x12\x7c\x61\xd9\x59\xc8\x6f\xba\x19\xb1\x12\xc6\x7d\x13\xc9\x76\x9e\x6b\xad\x13\x9f\xc2\xe4\x53\xbc\x24\xd6\x6f\xad\xf1\xda\x3b\x1a\x80\x6e\xba\xf9\x05\x00\x00\xff\xff\xff\x51\xc4\xf5\xaf\x00\x00\x00")

func fixturesPagePageJsonBytes() ([]byte, error) {
	return bindataRead(
		_fixturesPagePageJson,
		"fixtures/page/page.json",
	)
}

func fixturesPagePageJson() (*asset, error) {
	bytes, err := fixturesPagePageJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fixtures/page/page.json", size: 175, mode: os.FileMode(420), modTime: time.Unix(1551736418, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fixturesScreenAdvanceScreenJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x92\xbd\x8e\xdb\x3a\x10\x85\x7b\x3f\x05\xc1\xfa\xea\x42\xa2\x28\xaf\xbc\x40\x8a\x4d\x36\xc5\x16\x01\x82\x54\xe9\x16\x03\x72\xa2\x25\x6c\x0d\x05\x92\x32\xe2\x18\x7a\xf7\x80\xd4\xaf\x15\x56\xe2\xe1\x37\x07\xa3\x33\x73\x3f\x30\xc6\xc3\xad\x43\xfe\xcc\xb8\x57\x0e\x91\xf8\x7f\x51\x23\x68\x93\xf6\x8a\x01\xcc\x85\x7d\x43\xea\xd9\x77\x68\x90\xbd\x05\x6c\x47\xa4\xf7\xe8\xde\x74\x84\xe8\xc3\x8c\x52\xe7\x6c\x87\x2e\x18\xf4\xfc\x99\x45\x6f\xc6\xb8\x49\xc8\xfd\x6e\xf4\x30\x24\x8a\x31\xae\xa0\xed\xc0\x34\xf4\x0e\x5a\x9b\x60\x2c\xc1\x25\xf9\x58\xb6\x11\xfe\x61\x1b\x24\x75\x9b\xb9\xf1\xb2\x67\x5a\x70\x67\x0c\x86\x9a\x77\xf5\x01\x44\x38\xdb\x2e\x3a\x9b\xf5\x7d\xe5\xfc\xc3\x64\x59\xfa\xdc\xbf\x5b\xd7\x00\x99\x3f\x10\x9b\x9b\xb8\x07\x69\xcf\x7b\xdb\x3b\x35\x3b\x4e\x97\x3d\x13\x1c\xa8\x73\x6a\xd6\xea\x19\x9d\x35\x96\xb4\x03\x63\x43\x4a\x16\xc8\xd2\xad\xb5\xbd\x1f\x13\x8f\xd7\x4f\x2f\x9f\xbf\xbc\x8e\xb9\x2b\x4b\x01\x7f\x87\x35\x74\xd5\xfb\x60\xdb\xe5\x1e\x0d\xf4\x35\x4e\xc6\x1b\x6a\xc6\x89\x14\xa2\x94\x55\x26\xab\xe3\x53\x76\xaa\xeb\x63\x56\x17\x75\x9d\x89\xa3\xcc\xa5\x94\x52\x08\x21\xa6\x76\x97\x11\x9e\xa4\x2e\xe2\xc9\xca\xb2\x2c\xb3\xaa\xaa\xaa\x0c\x00\x20\xc3\x78\x4a\x95\xc7\xb3\xd6\xb4\x40\xfd\x2f\x50\xa1\x77\xe8\x62\xf5\x0f\x7b\xee\x37\xaf\x56\x8f\xb3\x29\x9f\x8a\xfc\xe7\xaa\xcf\xab\xe8\x1e\xe8\x2b\x3a\x3f\xc5\x2e\xea\xd3\xff\x79\xfe\x35\x97\x79\x2d\x5f\x78\x02\x86\x29\xd6\xe0\xc0\x04\xff\xf0\xcf\xde\x5b\x65\x20\xa0\x9e\xf6\xd4\x32\xa3\xa7\xa2\x25\x59\x43\x01\x1b\x97\x86\xb8\xdd\xda\x55\x2d\xb6\x96\x71\x37\xa2\xc0\xaf\x70\xe9\xb1\x78\xec\x60\x53\x24\xb6\x45\x2d\x74\xc9\x64\xd8\xa4\xd3\x6d\x89\xc9\x58\x2c\xc6\x82\x4f\x2f\xc3\xda\xed\x61\x38\xfc\x0d\x00\x00\xff\xff\x52\x7e\xb0\xab\xaf\x03\x00\x00")

func fixturesScreenAdvanceScreenJsonBytes() ([]byte, error) {
	return bindataRead(
		_fixturesScreenAdvanceScreenJson,
		"fixtures/screen/advance-screen.json",
	)
}

func fixturesScreenAdvanceScreenJson() (*asset, error) {
	bytes, err := fixturesScreenAdvanceScreenJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fixtures/screen/advance-screen.json", size: 943, mode: os.FileMode(420), modTime: time.Unix(1552511825, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fixturesScreenScreenJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcd\x4f\xca\x03\x21\x0c\x05\xf0\xbd\xa7\x08\x59\x7f\xcc\xec\x3d\xc1\x37\x27\xe8\xba\x38\x01\x03\xfe\x43\x53\xa4\x58\xef\x5e\xa2\x74\xfb\xcb\x7b\x2f\xc3\x00\xa0\xbc\x0b\xa1\x05\x6c\xae\x12\x25\xfc\x53\x4b\xcf\xb8\xec\x3f\x47\xda\xf2\x6a\x54\xaf\x5b\x2d\x79\xde\x54\x6a\x2e\x54\x85\xa9\xa1\x05\x9d\xd2\x31\x96\xb0\x9a\x0f\x0a\x2e\x47\x82\x0f\x5c\x89\x85\x9c\x5f\x1d\x1d\xaa\x41\xef\x5e\xa4\xd8\xf3\xec\xbd\x1f\xbc\x03\x87\xcb\xf1\x17\xe2\xf5\x69\x0c\xbe\xe7\x44\x03\x30\xcd\x34\xdf\x00\x00\x00\xff\xff\x71\xd0\x49\x1a\xad\x00\x00\x00")

func fixturesScreenScreenJsonBytes() ([]byte, error) {
	return bindataRead(
		_fixturesScreenScreenJson,
		"fixtures/screen/screen.json",
	)
}

func fixturesScreenScreenJson() (*asset, error) {
	bytes, err := fixturesScreenScreenJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fixtures/screen/screen.json", size: 173, mode: os.FileMode(420), modTime: time.Unix(1552454737, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fixturesTrackAdvanceTrackJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\x6e\xdb\x30\x0c\xbd\xe7\x2b\x04\x9e\x8b\xce\xf6\x8a\xa1\xcb\x2d\x48\x8a\x61\x40\x16\x0c\xcb\xb0\xc3\x2e\x81\x62\xb1\x29\x31\x8b\x12\x24\x3a\x5b\x10\xf8\xdf\x07\xc9\xa9\xed\xb4\x1d\x76\xb3\x1f\xf9\x1e\xc9\xf7\x74\x9e\x29\x05\x9a\x1d\x9f\xac\x6b\xe3\x67\x03\xf3\xfe\xb7\x2c\x0a\xb8\x49\xb5\xda\xb1\xe0\x1f\x81\xb9\x4a\xad\x4a\x81\x0f\x64\x75\x38\xed\xf6\x6d\x24\xc6\x18\x77\x2d\x53\x2a\x03\xe3\xef\x98\x39\x4a\x41\xc4\xda\xb1\xf9\x6f\x9b\x04\x5d\xff\x22\x3e\xac\xb4\xe8\x61\xc2\x1b\x43\x33\x48\x3e\xd1\xcb\x8f\xd5\x6d\xf9\xe1\xfe\xb6\xb8\x2d\x6f\xd4\xf8\x73\x77\x77\xd1\xcc\xad\x8d\xab\xb5\x90\xe3\x2b\x01\xa5\xc0\xd8\x34\x06\xee\x8b\xf7\x30\xc0\xdd\x84\x27\x64\xf1\xa7\x63\x4c\x4d\x0b\x8b\x81\x6a\xfd\x6e\xed\xe2\x6e\xc1\x07\x6c\x30\x3e\x93\x06\x0a\xf8\xe0\x3c\x06\x21\x8c\xd7\xbb\x2e\x57\x9b\xa4\xf1\xb0\xfa\xf4\xb0\x5c\x6c\xbf\x4f\x77\xa3\xb8\xa6\x63\x9a\xf0\xa8\x9b\x88\xaf\x14\xdb\x88\xa1\x8f\x21\x7d\x95\xd5\x65\xd3\x6e\x74\x8c\x64\x3a\x0c\x90\x85\xa4\x41\x8b\x9c\x71\xd0\xfb\xda\x5c\x38\xb3\x0b\x0f\xf0\x88\x9c\xcd\x5f\x26\x63\x59\xd4\x56\x74\x10\x34\x7d\xc4\x72\xf2\xf9\xe2\x9c\x46\x0f\x8d\x5b\xf0\x13\xf5\x10\xb1\xe0\x21\x64\x5b\xc7\xf9\x53\xb4\x9c\x6e\xc5\xda\x62\x02\xe0\xa8\x9b\x16\xcb\xeb\x23\x26\xa4\x6a\x4a\xb2\xda\x67\x91\xd1\x0d\xab\x7d\x75\xed\x6c\x12\xae\x06\xe1\x6a\x88\xe4\xc5\xc5\x6f\x04\x03\x94\x0f\x3a\x9f\xc9\x74\xdd\xf3\x0b\xfc\x86\x8f\x18\x02\x06\xb5\xd1\x36\x9b\xb0\x49\xf1\x0f\xc5\xd8\xfb\xa4\xbe\x36\xfa\xb4\x4f\xee\xe4\x8e\x49\xbd\xb5\xff\xac\xfe\x20\x83\x4e\x2d\x8c\x5a\x23\x1f\xe4\x09\xe6\xaa\x78\x59\xf9\xe2\x0c\x36\x89\xf5\x8a\xb3\x6d\xbd\x77\x39\xa2\xb9\x92\xd0\xa6\x77\xd2\xcd\xba\xd9\xdf\x00\x00\x00\xff\xff\x09\x1c\x0e\xf0\xaf\x03\x00\x00")

func fixturesTrackAdvanceTrackJsonBytes() ([]byte, error) {
	return bindataRead(
		_fixturesTrackAdvanceTrackJson,
		"fixtures/track/advance-track.json",
	)
}

func fixturesTrackAdvanceTrackJson() (*asset, error) {
	bytes, err := fixturesTrackAdvanceTrackJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fixtures/track/advance-track.json", size: 943, mode: os.FileMode(420), modTime: time.Unix(1552511920, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fixturesTrackTrackJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\x31\x0a\x02\x31\x10\x45\xfb\x9c\xe2\x33\xb5\x27\xd8\xce\x46\xb0\x13\xdc\x0b\x8c\xd9\x29\xc2\xae\x49\x98\x9d\x08\x12\x72\x77\x99\x45\xb1\x7d\xef\xf1\xf9\x3d\x00\x64\xef\x2a\x34\x81\x4c\x39\xae\x74\x72\x24\x2f\xc9\xe6\xec\x9e\x9e\x75\x13\xcc\x7f\xd5\x76\xd1\xeb\xe2\xae\x2a\x9b\xc8\x17\x57\x2d\x55\xd4\x92\xec\x34\xc1\x67\x01\x4a\x47\xd6\x7b\x5a\xc6\x38\x2a\xef\x36\xce\x4e\x6f\x5a\x70\xce\xb9\xf1\xf6\x33\x1c\x63\x69\xd9\x66\x7f\x83\x09\x74\xe1\x28\x8f\x52\x56\x0a\xc0\x08\x23\x7c\x02\x00\x00\xff\xff\xad\x23\x77\x22\xac\x00\x00\x00")

func fixturesTrackTrackJsonBytes() ([]byte, error) {
	return bindataRead(
		_fixturesTrackTrackJson,
		"fixtures/track/track.json",
	)
}

func fixturesTrackTrackJson() (*asset, error) {
	bytes, err := fixturesTrackTrackJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fixtures/track/track.json", size: 172, mode: os.FileMode(420), modTime: time.Unix(1551736418, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fixtures/alias/advance-alias.json":       fixturesAliasAdvanceAliasJson,
	"fixtures/alias/alias.json":               fixturesAliasAliasJson,
	"fixtures/group/advance-group.json":       fixturesGroupAdvanceGroupJson,
	"fixtures/group/group.json":               fixturesGroupGroupJson,
	"fixtures/identify/advance-identify.json": fixturesIdentifyAdvanceIdentifyJson,
	"fixtures/identify/identify.json":         fixturesIdentifyIdentifyJson,
	"fixtures/page/page.json":                 fixturesPagePageJson,
	"fixtures/screen/advance-screen.json":     fixturesScreenAdvanceScreenJson,
	"fixtures/screen/screen.json":             fixturesScreenScreenJson,
	"fixtures/track/advance-track.json":       fixturesTrackAdvanceTrackJson,
	"fixtures/track/track.json":               fixturesTrackTrackJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"fixtures": &bintree{nil, map[string]*bintree{
		"alias": &bintree{nil, map[string]*bintree{
			"advance-alias.json": &bintree{fixturesAliasAdvanceAliasJson, map[string]*bintree{}},
			"alias.json":         &bintree{fixturesAliasAliasJson, map[string]*bintree{}},
		}},
		"group": &bintree{nil, map[string]*bintree{
			"advance-group.json": &bintree{fixturesGroupAdvanceGroupJson, map[string]*bintree{}},
			"group.json":         &bintree{fixturesGroupGroupJson, map[string]*bintree{}},
		}},
		"identify": &bintree{nil, map[string]*bintree{
			"advance-identify.json": &bintree{fixturesIdentifyAdvanceIdentifyJson, map[string]*bintree{}},
			"identify.json":         &bintree{fixturesIdentifyIdentifyJson, map[string]*bintree{}},
		}},
		"page": &bintree{nil, map[string]*bintree{
			"page.json": &bintree{fixturesPagePageJson, map[string]*bintree{}},
		}},
		"screen": &bintree{nil, map[string]*bintree{
			"advance-screen.json": &bintree{fixturesScreenAdvanceScreenJson, map[string]*bintree{}},
			"screen.json":         &bintree{fixturesScreenScreenJson, map[string]*bintree{}},
		}},
		"track": &bintree{nil, map[string]*bintree{
			"advance-track.json": &bintree{fixturesTrackAdvanceTrackJson, map[string]*bintree{}},
			"track.json":         &bintree{fixturesTrackTrackJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
